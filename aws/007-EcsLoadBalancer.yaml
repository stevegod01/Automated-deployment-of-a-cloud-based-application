Parameters:
  EnvironmentName:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Stage
      - Prod
  ServiceNameDashy:
    Type: String
    Default: links-air
Mappings:
  Settings:
    EnvironmentNameLower:
      Dev: dev
      Stage: stage
      Prod: prod
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      # LoadBalancerAttributes: 
      #   - Key: access_logs.s3.enabled
      #     Value: "true"
      #   - Key: access_logs.s3.bucket
      #     Value: 
      Name: !Join ['-', [!FindInMap [Settings, EnvironmentNameLower, !Ref EnvironmentName], !Ref ServiceNameDashy]]
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LbSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${EnvironmentName}Vpc-PublicSubnetA
        - Fn::ImportValue: !Sub ${EnvironmentName}Vpc-PublicSubnetB
        - Fn::ImportValue: !Sub ${EnvironmentName}Vpc-PublicSubnetC
      Type: application

  LbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For Public LB Traffic
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}Vpc-Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates: 
       - CertificateArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}AcmCert-LbCert
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Name: !Join ['-', [!FindInMap [Settings, EnvironmentNameLower, !Ref EnvironmentName], !Ref ServiceNameDashy]]
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}Vpc-Vpc



Outputs:
  LbSecurityGroup:
    Value: !Ref LbSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-LbSecurityGroup"
  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroup"